LEARNING BABEL
===================================================
https://babeljs.io/docs/en/usage
* Compile JS app code
    * Install packages:
        npm install --save-dev @babel/core @babel/cli @babel/preset-env
        npm install --save @babel/polyfill

    * Create file `babel.config.js` in project root:
        const presets = [
            [
                "@babel/env",
                {
                    targets: {
                        edge: "17",
                        firefox: "60",
                        chrome: "67",
                        safari: "11.1",
                    },
                    useBuiltIns: "usage",
                },
            ],
        ];

        module.exports = { presets };

    * Compile all source code from `src/` to `lib/`
        ./node_modules/.bin/babel src --out-dir lib


https://babeljs.io/docs/en/babel-preset-react
* Includes
    @babel/plugin-syntax-jsx
    @babel/plugin-transform-react-jsx
    @babel/plugin-transform-react-display-name
* Includes (dev)
    @babel/plugin-transform-react-jsx-self
    @babel/plugin-transform-react-jsx-source

* Installation
    npm install --save-dev @babel/preset-react

* Usage (via `.babelrc`, recommended)
    {
        "presets": ["@babel/preset-react"]
    }


https://ccoenraets.github.io/es6-tutorial/setup-babel/
(This may be out of date)
* Modify `package.json`
    "scripts": {
        "babel": "babel --presets react <input-file> -o <target-file>",
        ...
    }


https://www.sitepoint.com/babel-beginners-guide/
* Modify scripts:
    "scripts": {
        "babel": "babel src -d dist",
        ...
    }
* Install preset:
    npm install babel-preset-react --save-dev

* `.babelrc` in project root:
    {
        "presets": ["react"]
    }


https://www.valentinog.com/blog/babel/
* Webpack
    * install
        npm i webpack --save-dev
        npm i webpack-cli --save-dev
    * add to `package.json`
        "scripts": {
            "build": "webpack --mode production"
        }
* Babel
    * webpack doesn't know how to transpile ES6, but it _does_ have concept of loaders (input -> output)
    * babel-loader is webpack loader responsible for ES6 transpiling
    * presets
        babel preset env (ES6 to ES5)
        babel preset react (JSX to JS)
    * pull dependencies
        npm i @babel/core babel-loader @babel/preset-env @babel/preset-react --save-dev
    * configure babel
        (create `.babelrc` in project root)
        (add...)
        {
            "presets": [@babel/preset-env", "@babel/preset-react"]
        }
    * create/add-to `webpack.config.js`
        module.exports = {
            module: {
                rules: [
                    {
                        test: /\.(js|jsx)$/,
                        exclude: /node_modules/,
                        use: {
                            loader: "babel-loader"
                        }
                    }
                ]
            }
        };
* React
    * PropTypes
        * Install
            npm i prop-types --save-dev
* Webpack: HTML
    * Install dependencies
        npm i html-webpack-plugin html-loader --save-dev
    * Update `webpack.config.js`
        const HtmlWebPackPlugin = require("html-webpack-plugin");

        module.exports = {
            module: {
                rules: [
                    {
                        test: /\.(js|jsx)$/,
                        exclude: /node_modules/,
                        use: {
                            loader: "babel-loader"
                        }
                    },
                    {
                        test: /\.html$/,
                        use: [
                            {
                                loader: "html-loader"
                            }
                        ]
                    }
                ]
            },
            plugins: [
                new HtmlWebPackPlugin({
                    template: "./src/index.html",
                    filename: "./index.html"
                })
            ]
        };
    * Create base HTML file at `./src/index.html`
* Webpack: Dev Server
    * Install dependencies
        npm i webpack-dev-server --save-dev
    * Update `package.json`:
        "scripts": {
            "start": "webpack-dev-server --open --mode development",
            "build": "webpack --mode production"
        }
    * Run
        npm start


--------------------------------------------------------------

https://www.robinwieruch.de/minimal-react-webpack-babel-setup/
REACT SETUP
* Create directory for project, go into directory
* Initialize as npm project
    ("-y" sets all configurations to default)
    npm init -y
* Change configs as desired
    (example)
    npm config list
    npm set init.author.name "<name>"
    npm set init.author.email
    npm set init.author.url
    npm set init.license
    (etc)
* You can install node packages (libraries) to your project w/ npm
    * Once you install it, it should show up in your `package.json` file
* Create distribution directory (e.g. `dist/`)
    * add `index.html`
WEBPACK SETUP
* Install Webpack
    (webpack = webpack)
    (webpack-dev-server = to serve our bundled app in local)
    (webpack-cli = for configuration setup in file)
    npm install --save-dev webpack webpack-dev-server webpack-cli
* This creates the `node_modules/` directory which contains third-party dependencies
    * These are listed in `package.json` as well because of the `--save-dev` flag
* Add start script additionally to default given scripts to run server:
    ...
    "scripts": {
        "start": "webpack-dev-server --config ./webpack.config.js --mod development",
        ...
    },
    ...
    (defines you want to use a specific config file)
    (`--mode development` adds default Webpack configs that come w/ Webpack 4 only)
* Create `webpack.config.js` in root directory
    module.exports = {
        entry: './src/index.js',
        output: {
            path: __dirname + '/dist',
            publicPath: '/',
            filename: 'bundle.js'
        },
        devServer: {
            contentBase: './dist'
        }
    };
    (we want to use `src/index.js` as entry point to bundle all imported files)
    (bundled files will result in a `bundle.js` file)
    (bundled file will be generated in `/dist` and used to serve our app)
* Create source directory
    * put `index.js` in there
BABEL SETUP
* Install dependencies
    npm install --save-dev @babel/core @babel/preset-env
* Install Webpack loader
    npm install --save-dev babel-loader
* Install React preset
    npm install --save-dev @babel/preset-react
* Update `package.json`:
    ...
    "keywords": [],
    "author": "",
    "license": "ISC",
    "babel": {                           << start
        "presets": [
            "@babel/preset-env",
            "@babel/preset-react"
        ]
    },                                   << end
    "devDependencies": {
    ...
* Update `webpack.config.js`:
    module.exports = {
        entry: './src/index.js',
        module: {                           << start
            rules: [
                {
                    test: /\.(js|jsx)$/,
                    exclude: /node_modules/,
                    use: ['babel-loader']
                }
            ]
        },                                  << end
        resolve: {
            extensions: ['*', '.js', '.jsx']
        },
        output: {
            path: __dirname + '/dist',
            publicPath: '/',
            filename: 'bundle.js'
        },
        devServer: {
            contentBase: './dist'
        }
    };
* You could also put your babel configs from `package.json` into `.babelrc`:
    {
        "presets": [
            "@babel/preset-env",
            "@babel/preset-react"
        ]
    }
REACT (FINAL SETUP)
* Install React packages
    npm install --save react react-dom

REACT HOT MODULE REPLACEMENT
* Allows you to update parts of site as you work
    npm install --save-dev react-hot-loader
* Update `webpack.config.js`:
    const webpack = require('webpack');

    module.exports = {
        entry: './src/index.js',
        module: {
            rules: [
                {
                    test: /\.(js|jsx)$/,
                    exclude: /node_modules/,
                    use: ['babel-loader']
                }
            ]
        },
        resolve: {
            extensions: ['*', '.js', '.jsx']
        },
        output: {
            path: __dirname + '/dist',
            publicPath: '/',
            filename: 'bundle.js'
        },
        plugins: [
            new webpack.HotModuleReplacementPlugin()
        ],
        devServer: {
            contentBase: './dist',
            hot: true
        }
    };
Update `index.js`:
    import React from 'react';
    import ReactDOM from 'react-dom';

    const title = 'My Minimal React Webpack Babel Setup';

    ReactDOM.render(
        <div>{title}</div>,
        document.getElementById('app')
    );

    module.hot.accept();


--------------------------------------------------------------

https://blog.bitsrc.io/setting-a-react-project-from-scratch-using-babel-and-webpack-5f26a525535d
* Required NPM modules
    * (everything else you know you need already)
    * style-loader (loads CSS in head of HTML)
    * css-loader (config webpack for compiling the CSS)