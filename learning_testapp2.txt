LEARNING TEST-APP2 v3
========================================
GOAL: setup ReactJS project _without_ using a pre-built boilerplate
1.  create directory
2.  initialize for npm
        npm init -y
3.  add directories & base files
        /src
            /styles
            /components
            index.js
            index.html
        /dist

        (index.html will be used as a template, you do not need to import any other files)
5.  install packages
        webpack
            npm install --save-dev webpack webpack-dev-server webpack-cli
        babel
            npm install --save-dev @babel/core @babel/preset-env @babel/preset-react babel-loader
        webpack plugins
            npm install --save-dev html-webpack-plugin mini-css-extract-plugin clean-webpack-plugin
        react
            npm install react react-dom react-router-dom prop-types
        redux
            npm install redux react-redux redux-logger redux-thunk
            npm install --save-dev redux-devtools
        sass
            npm install --save-dev css-loader sass-loader node-sass
        linting (ES6)
            npm install --save-dev prettier eslint eslint-config-airbnb eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react eslint-import-resolver-webpack eslint-config-prettier eslint-plugin-prettier
        linting (sass)
            npm install --save-dev stylelint stylelint-config-prettier stylelint-config-recommended-scss stylelint-prettier stylelint-scss
        git linting
            npm install --save-dev husky lint-staged
        testing
            npm install --save-dev jest babel-jest eslint-plugin-jest
        other
            npm install --save-dev html-loader
            npm install uuid
        TOTAL
            npm install --save-dev webpack webpack-dev-server webpack-cli @babel/core @babel/preset-env @babel/preset-react babel-loader html-webpack-plugin mini-css-extract-plugin clean-webpack-plugin redux-devtools css-loader sass-loader node-sass html-loader
            npm install react react-dom react-router-dom redux react-redux prop-types uuid
6.  create `webpack.config.js`
    (see boilerplate)
11. create react code
15. import SCSS into JS
        import styles from './styles/main.scss';
        (this is needed so that Webpack recognizes the dependency)
XX. start it up
        npm start
        (access at `localhost:8080`)





LEARNING TEST-APP2 v2
========================================
(putting together everything I know, I think)
GOAL: setup ReactJS project _without_ using a pre-built boilerplate
1.  create directory
2.  initialize for npm
        npm init -y
3.  add directories & base files
        /src
            /styles
            /components
            index.js
            index.html
        /dist

        (index.html will be used as a template, you do not need to import any other files)
5.  install packages
        webpack
            npm install --save-dev webpack webpack-dev-server webpack-cli
        babel
            npm install --save-dev @babel/core @babel/preset-env @babel/preset-react babel-loader
        webpack plugins
            npm install --save-dev html-webpack-plugin mini-css-extract-plugin clean-webpack-plugin
        react
            npm install react react-dom react-router-dom
            npm install --save-dev prop-types
        redux
            npm install redux react-redux
            npm install --save-dev redux-devtools
        sass
            npm install --save-dev css-loader sass-loader node-sass
        other
            npm install --save-dev html-loader
            npm install uuid
        TOTAL
            npm install --save-dev webpack webpack-dev-server webpack-cli @babel/core @babel/preset-env @babel/preset-react babel-loader html-webpack-plugin mini-css-extract-plugin clean-webpack-plugin redux-devtools css-loader sass-loader node-sass html-loader
            npm install react react-dom react-router-dom redux react-redux prop-types uuid
6.  create `webpack.config.js`:
        const webpack = require('webpack');
        const HtmlWebpackPlugin = require('html-webpack-plugin');
        const MiniCssExtractPlugin = require('mini-css-extract-plugin')
        const CleanWebpackPlugin = require('clean-webpack-plugin');

        const devMode = process.env.NODE_ENV !== 'production';
        const SRC_DIR = __dirname + '/src';
        const DIST_DIR = __dirname + '/dist';

        module.exports = {
            entry: SRC_DIR + '/index.js',
            plugins: [
                new webpack.HotModuleReplacementPlugin(),
                new HtmlWebpackPlugin({
                    template: SRC_DIR + '/index.html',
                    filename: './index.html'
                }),
                new MiniCssExtractPlugin({
                    //filename: devMode ? '[name].css' : '[name].[hash].css',
                    //chunkFilename: devMode ? '[id].css' : '[id].[hash].css'
                    filename: '[name].css',
                    chunkFilename: '[id].css'
                }),
                new CleanWebpackPlugin()
            ],
            module: {
                rules: [
                    {
                        test: /\.(js|jsx)$/,
                        exclude: /node_modules/,
                        use: ['babel-loader']
                    },
                    {
                        test: /\.(scss|sass|css)$/,
                        exclude: /node_modules/,
                        use: [
                            MiniCssExtractPlugin.loader,
                            {
                                loader: 'css-loader',
                                options: {
                                    modules: true,
                                    sourceMap: devMode,
                                    importLoaders: 1,
                                    //localIdentName: '[path][name]__[local]--[hash:base64:5]'
                                    localIdentName: '[local]'
                                }
                            },
                            'sass-loader'
                        ]
                    },
                    {
                        test: /\.html$/,
                        exclude: /node_modules/,
                        use: {
                            loader: 'html-loader',
                            options: {minimize: true}
                        }
                    }
                ]
            },
            resolve: {
                extensions: ['*', '.js', '.jsx']
            },
            output: {
                path: DIST_DIR,
                publicPath: '/',
                filename: 'bundle.js'
            },
            devServer: {
                contentBase: './dist',
                hot: true,
                historyApiFallback: true
            }
        };
7.  update `package.json`:
        ...
        "scripts": {
            "start": "webpack-dev-server --config ./webpack.config.js --mode development",
            "build": "webpack --mode production",
            ...
        },
        ...
8.  setup HMR
        (add the following to `index.js`)
        ...
        if (module.hot) {
            module.hot.accept();
        }
        TODO: is this actually legit? How do we get HMR running?
9.  update `package.json`:
        ...
        "keywords": [],
        "author": "",
        "license": "ISC",
        "babel": {                           << start
            "presets": [
                "@babel/preset-env",
                "@babel/preset-react"
            ]
        },                                   << end
        "devDependencies": {
        ...
11. create react code or whatever
15. import SCSS into JS
        import styles from './styles/main.scss';
        (this is needed so that Webpack recognizes the dependency)
XX. start it up
        npm start
        (access at `localhost:8080`)





REDUX INTEGRATION
========================================
* Presentational Components
    index
        navbar
        home
        cardsGame
            cardsInput
            cardsDeck
                card
            conclusion

* Container Components
    Display all cards
        --> cardsDeck, card
    Flip card
        --> cardsDeck, card
    Change Number of Cards Dealt (implement last)
        --> cardsInput
    Reset game
        --> conclusion

    DOES THIS NEED TO BE REDONE? ignore this for now, you'll know when you need it

* State
    cardArray: string
    numCards: number (if this is even necessary?)

* Wrapping
    Provider
        Router
            navbar
            route=home
            route=cardsGame



* ACTIONS
    * TYPES
        const REMOVE_CARD = 'REMOVE_CARD';
        const FLIP_CARD = 'FLIP_CARD';
        const CHANGE_NUM_CARDS = 'CHANGE_NUM_CARDS';
        const RESET_GAME = 'RESET_GAME';

    * CREATORS
        function removeCard(id) {
            return {
                type: REMOVE_CARD,
                cardId: id
            }
        }

        function changeNumCards(number) {
            return {
                type: CHANGE_NUM_CARDS,
                numCards: number
            }
        }

        function resetGame() {
            return {
                type: RESET_GAME
            }
        }

    * Example
        {
            type: 'FLIP_CARD',
            cardId: 0
        }
        
        {
            type: 'CHANGE_NUM_CARDS',
            numCards: 7
        }

* REDUCERS
    * Basic
        function fullApp (state = {}, action) {
            switch (action.type) {
                case REMOVE CARD:
                    return Object.assign({}, state, {
                        cardArray: state.cardArray.map((card,index) => {
                            if (index === action.cardId) {
                                return "Removed"
                            }
                            return card
                        })
                    })
                case CHANGE_NUM_CARDS:
                    return Object.assign({}, state, {
                        numCards: action.numCards
                        cardArray: action.newCardArray
                    })
                case RESET_GAME:
                    return Object.assign({}, state, {
                        cardArray: action.newCardArray
                    })
                default:
                    return state;
            }
        }

    * Split
        function fullApp (state = {}, action) {
            visibilityFilter: visibilityFilter(state.visibilityFilter, action),
            todos: todos(state.todos, action)

            cardNum: changeNumCardsReducer(state.numCards, action),
            cardArray: cardArrayReducers(state.cardArray, action)
            // This won't quite work...
        }
    
    * Revised v1
        (using `combineReducers`)
        const rootReducer = combineReducers({
            numCards: numCardsReducer,
            cardArray: cardArrayReducer
        });

        function numCardsReducer(state = DEFAULT_CARD_NUM, action) {
            switch (action.type) {
                case CHANGE_NUM_CARDS:
                    return action.numCards;
                default:
                    return state;
            }
        }

        function cardArrayReducer(state = [], action) {
            switch (action.type) {
                case REMOVE_CARD:
                    return state;
                case RESET_GAME:
                    return state;
                default:
                    return state;
            }
        }
    
    * Revised v2
        function rootReducer(state = {}, action) {
            return {
                cardArray: cardArrayReducer(state.cardArray, action)
            }
        }

        function cardReducer(state = [], action) {
            switch (action.type) {
                case REMOVE_CARD:
                    return doRemoveCard(state.cardArray.slice(), action.cardId)
                    });
                case RESET_GAME:
                    return action.cardArray;
                default:
                    return doDefaultArray(DEFAULT_CARD_NUM);
            }
        }



        function doRemoveCard(cardArray, indexToRemove) {
            if (cardArray[indexToRemove] !== "Up") {
                return cardArray;
            }

            // Flip Left Card
            if (indexToRemove > 0) {
                cardArray[indexToRemove-1] = doFlipCard(cardArray[indexToRemove-1]);
            }

            // Flip Right Card
            if (indexToRemove < cardArray.length-1) {
                cardArray[indexToRemove+1] = doFlipCard(cardArray[indexToRemove+1]);
            }
            
            // Remove Selected Card
            cardArray[indexToRemove] = "Removed";

            return cardArray;
        }

        function doFlipCard(cardValue) {
            if (cardValue !== "Removed") {
                return cardValue === "Down" ? "Up" : "Down";
            }
            return cardValue;
        }

        function doDefaultArray(length) {
            const newArray = Array(length).fill(null);
            let countUp = 0;

            for (let i=0; i < length; i++) {
                newArray[i] = Math.floor(Math.random()*2) === 1 ? "Up" : "Down";
                countUp += newArray[i] === "Up" ? 1 : 0;
            }
            
            // Ensures at least one cell is face-up
            if (countUp === 0) {
                let n = Math.floor(Math.random()*6);
                newArray[n] = "Up";
            }

            return newArray;
        }
    


    * Revised v3 (bad)
        (using jankey state splitting)
        function rootReducer(state = {}, action) {
            return {
                numCards: numCardsReducer(state.numCards, action),
                cardArray: cardArrayReducer(state, action)
            }
        }

        function numCardsReducer(state = DEFAULT_CARD_NUM, action) {
            switch (action.type) {
                case CHANGE_NUM_CARDS:
                    return action.numCards;
                default:
                    return state;
            }
        }

        function cardArrayReducer(state = {}, action) {
            switch (action.type) {
                case REMOVE_CARD:
                    return Object.assign({},state,{
                        cardArray: doRemoveCard(state.cardArray, action.cardId)
                    });
                case RESET_GAME:
                    return Object.assign({},state,{
                        cardArray: doResetGame(state.cardArray, state.numCards)
                    });
                default:
                    return state;
            }
        }

* STORE
    * Pure Redux
        const store = createStore(fullApp);

        console.log(store.getState());
        const unsubscribe = store.subscribe(() => console.log(store.getState()));
        store.dispatch(actionCreator(arg));
        unsubscribe();

    * Setup
        import { Provider } from 'react-redux'
        import store from './redux/store'
        ...
        <Provider store={store}>
            <App />
        </Provider>

    * Revised
        import { createStore } from 'redux';

        const store = createStore(rootReducer);

    * Connecting
        const mapStateToProps = (state, ownProps) => ({});
        const mapDispatchToProps = {
            removeCard,
            changeNumCards,
            resetGame
        };

        connect(mapStateToProps, mapDispatchToProps)(Component);





















So I am updating my card game to Redux. I have identified the following actions:
```
REMOVE_CARD (changes one "up" card to "removed")
CHANGE_NUM_CARDS (changes total number of cards to play with)
RESET_GAME (resets the game to a new, random start)
```
I have then come up with action creators for each of these (which may change).
```
removeCard(id)
changeNumCards(number)
resetGame()
```
Following this, I am working on reducers. Here I have two problems. First: the result of some of my actions is random. Each game is randomly generated for the number of cards specified. I did some reading (https://daveceddia.com/random-numbers-in-redux/) and basically I need to either have a random-generation function in the action creator, or in the dispatch call. Now, I'm not just generating a random number, but a whole array containing the values of the cards. Thus, would it be appropriate for the action for RESET_GAME to contain an entirely new array of cards?

Second question: this is backing up a bit, but a fundamental thing I have to consider: I classified "REMOVE_CARD" as one action, but every time you remove a card you also flip cards... Pre-redux, the action handler for a click to remove handled that. It removed the card, if appropriate, then flipped the two adjacent cards if necessary. Where should this logic go in Redux? Should the removeCard() action creator handle it all by _also_ creating a new array of cards? or is that too much logic for the action creator? I'm unsure where to put complicated logic like that.



LEARNING TEST APP 2 v1
========================================
(putting together everything I know, I think)
GOAL: setup ReactJS project _without_ using a pre-built boilerplate
1.  create directory
2.  initialize for npm
        npm init -y
3.  add other directories
        /src
        /dist
4.  add base files
        /src/index.js
        /dist/index.html
5.  install webpack
        npm install --save-dev webpack webpack-dev-server webpack-cli
6.  create `webpack.config.js`:
        const webpack = require('webpack');

        module.exports = {
            entry: './src/index.js',
            module: {
                rules: [
                    {
                        test: /\.(js|jsx)$/,
                        exclude: /node_modules/,
                        use: ['babel-loader']
                    }
                ]
            },
            resolve: {
                extensions: ['*', '.js', '.jsx']
            },
            output: {
                path: __dirname + '/dist',
                publicPath: '/',
                filename: 'bundle.js'
            },
            devServer: {
                contentBase: './dist'
            }
        };
7.  update `package.json`:
        ...
        "scripts": {
            "start": "webpack-dev-server --config ./webpack.config.js --mod development",
            "build": "webpack --mode production",
            ...
        },
        ...
9.  install babel
        npm install --save-dev @babel/core @babel/preset-env @babel/preset-react babel-loader
        npm install --save-dev html-webpack-plugin ???
            (or is this webpack?)
            (is this actually needed?)
9.  update `package.json`:
        ...
        "keywords": [],
        "author": "",
        "license": "ISC",
        "babel": {                           << start
            "presets": [
                "@babel/preset-env",
                "@babel/preset-react"
            ]
        },                                   << end
        "devDependencies": {
        ...
10. install react
        npm install react react-dom prop-types react-router-dom
11. create react code or whatever
12. install SASS
        npm install css-loader sass-loader node-sass
13. create SASS directories & files
        /src/styles
            _variables.scss
            main.scss
            (etc.)
14. import SASS files into `main.scss`
        @import '_variables.scss'
        @import 'variables'
15. import into JS
        import styles from './styles/main.scss';
XX. start it up
        npm start
        (access at `localhost:8080`)











===========================================================================
===========================================================================
===========================================================================
TEMPORARY STORAGE
===========================================================================
===========================================================================
===========================================================================


                    {/* Head */}
                    <circle cx="25" cy="30" r="5"></circle>
                    {/* Neck */}
                    <path d="M25 35 L25 45"></path>
                    {/* Body */}
                    <path d="M20 45 L30 45 L30 70 L20 70 L20 45"></path>
                    {/* Left Arm */}
                    <path d="M20 47 L5 65"></path>
                    {/* Right Arm */}
                    <path d="M30 47 L45 65"></path>
                    {/* Left Leg */}
                    <path d="M20 70 L10 95"></path>
                    {/* Right Leg */}
                    <path d="M30 70 L40 95"></path>