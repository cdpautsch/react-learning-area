LEARNING STACK STUFF
===========================================================
===========================================================
===========================================================

SASS + REACT/WEBPACK/BABEL
===========================================================
https://sass-lang.com/
* SASS has a pure JS library that's just a little slower

https://www.codementor.io/valentinrad/roll-your-own-tiny-react-environment-using-webpack-babel-and-sass-ei70wyhjl
* Install packages
    * creates style tags from JS strings
        npm install style-loader
    * translates CSS into JS strings
        npm intall css-loader
    * translates SASS into CSS
        npm install sass-loader
    * SASS compiler used by the loader above
        npm install node-sass
* Update webpack config:
    {
        test: /\.scss$/,
        use: ['style-loader', 'css-loader', 'sass-loader']
    }
    NOTE: we should _NOT_ use style-loader because we do not want to use inline styles _ever_
* Import SASS into `app.js`
    import './App.scss'


https://medium.com/@joshuacrass/react-scss-and-webpack-ae9bd84b9e43
* Add packages
    npm install sass-loader node-sass
* Update webpack
    {
        loader: 'sass-loader',
        options: {
            sourceMap: true,
        },
    },
* Optional sourceMap def: sourceMap: process.env.NODE_ENV !== 'production'
* Import
    import style from './app/scss';
* Add class:
    className={style.sassyDiv}
* Add SASS Linter
    npm install sass-lint


http://blog.marcnuri.com/react-babel-webpack-sass-application/
* NPM install:
    npm install --save-dev mini-css-extract-plugin css-loader sass-loader node-sass
* Packages:
    mini-css-extract-plugin = extracts all generated CSS into single file
    css-loader = css modules and resolving styles
    sass-loader & node-sass = SCSS preprocessing & compiling
* Update webpack config:
    {
        test: /\.(scss|sass|css)$/,
        exclude: /node_modules/,
        loaders: [
            MiniCssExtractPlugin.loader,
            {
                loader: 'css-loader',
                options: {
                    modules: true,
                    sourceMap: true,
                    importLoaders: 1,
                    localIdentName: '[local]___[hash:base64:5]'
                }
            },
        'sass-loader',
        ]
    },

    ...

    new MiniCssExtractPlugin({
        filename: devMode ? '[name].css' : '[name].[hash].css',
        chunkFilename: devMode ? '[id].css' : '[id].[hash].css',
    })
* File structure
    /src
        /styles
            /partials
                _base.scss
                _mixins.scss
                _variables.scss
            main.scss
* Import into JS
    import styles from './styles/main.scss';
* 





MODULAR CSS
======================================
https://medium.com/@pioul/modular-css-with-react-61638ae9ea3e
* ?


https://www.reddit.com/r/javascript/comments/94ag8r/what_is_the_best_way_to_style_react_components/









LINTING
========================================
ESLint
https://medium.com/@joshuacrass/javascript-linting-and-formatting-with-eslint-prettier-and-airbnb-30eb746db862
* What is it?


https://www.reddit.com/r/reactjs/comments/beiys2/what_are_the_eslint_plugins_you_use_for_your/
* ???


https://www.robinwieruch.de/react-eslint-webpack-babel/
* Install
    npm install --save-dev
        eslint
        eslint-loader
        babel-eslint
        eslint-plugin-react
* Update webpack config rules:
    {
      test: /\.js$/,
      exclude: /node_modules/,
      use: ['babel-loader','eslint-loader']
    }
* Create eslint config:
    .eslintrc
* Add rules (list at https://eslint.org/docs/rules/):
    {
        parser: "babel-eslint",
        "plugins": [
            "react"
        ],
        "rules": {
            "max-len": [1,70,2, {ignoreComments; true}],
            "prop-types": [2]
        },
    }
* Presets:
    * React: https://github.com/yannickcr/eslint-plugin-react#user-content-recommended-configuration
    * Airbnb: https://github.com/airbnb/javascript, https://www.npmjs.com/package/eslint-config-airbnb
* Install Presets:
    npm install --save-dev
        eslint-config-airbnb
        eslint-plugin-import
        eslint-plugin-jsx-a11y
* Add after 'rules':
    "extends": ["airbnb-base"]
* Disable a rule globally (example):
    "no-unused-vars": 0
* Total installs (sum of previously mentioned):
    npm install --save-dev
        babel-eslint
        eslint
        eslint-loader
        eslint-config-airbnb
        eslint-plugin-import
        eslint-plugin-jsx-a11y
        eslint-plugin-react
* Total config (sum of above):
    {
        parser: "babel-eslint",
        "plugins": [
            "react"
        ],
        "rules": {
            "max-len": [1,70,2, {ignoreComments; true}],
            "prop-types": [2]
        },
        "extends": ["airbnb-base"]
    }



https://medium.com/@joshuacrass/javascript-linting-and-formatting-with-eslint-prettier-and-airbnb-30eb746db862
* Install prettier
    npm install --save-dev
        prettier                (code formatter)
        eslint-config-prettier  (tunrs off rules that conflict w/ prettier)
        eslint-plugin-prettier  (runs prettier as an ESLint rule and reports differences as issues)
* Install eslint
    npm install --save-dev
        eslint                  (linter)
        eslint-config-airbnb    (airbnb style guide for ESLint)
        eslint-plugin-import    (supports ES6 imports)
        eslint-plugin-jsx-a11y  (for JSX, required by eslint)
        eslint-plugin-react     (React-specific linting)
        eslint-import-resolver-webpack  (webpack-literate module resolution plugin)
* Setup `.eslintrc` (can be `.json` or `.js`):
    {
        "extends": ["airbnb", "prettier", "prettier/react"],
        "plugins": ["react", "prettier"],
        "rules": {
            "react/jsx-filename-extension": [
                1,
                {
                    "extensions": [".js", "jsx"]
                }
            ],
            "prettier/prettier": "error",
            "max-len": ["error", 80]
        },
        "env": {
            "browser": true
        },
        "settings": {
            "import/resolver": {
                "webpack": {
                    "config": "./config/webpack-common-config.js"
                }
            }
        }
    }
* Create script to run ESLint in `package.json`:
    "lint": "eslint src -c .eslintrc.json --ext js,jsx",
    (this will lint js/jsx files in src directory with a given config file)
* Create `.eslintignore` file:
    node_modules/*
    build/*
    dist/*
* `eslint-config-prettier` will turn off certain conflicting rules, but you can also override rules by adding a `.prettierrc` file:
    {
        "singleQuote": true,
        "trailingComma": "all"
    }
* Linting
    (_no_ auto-fixing)
        npm run lint
    (w/ auto-fixing)
        npm run lint --fix
* Git Hooks w/ Husky (https://github.com/typicode/husky)
    * Install
        npm install --save-dev husky lint-staged
    * update `package.json`:
        "husky": {
            "hooks": {
                "pre-commit": "lint-staged",
            }
        },
        "lint-staged": {
            "*.{js,jsx}": [
                "eslint"
            ],
            "*.{js,jsx,json,md}": [
                "prettier --list-different"
            ]
        }
    * If you want to limit which files are linted, change `lint-staged` to:
        "src/**/*.{js,jsx}"
        (will only lint files in `src/`)
    * You can skip linting with:
        git commit -m "message" --no-verify
    * Add new script in `package.json`:
        "check-staged": "lint-staged",
    * Run:
        (modify and add/stage files)
        npm check-staged
    * Commit changes (should see confirmation from husky)
* TOTAL INSTALLS:
    npm install --save-dev prettier eslint eslint-config-airbnb eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react eslint-import-resolver-webpack eslint-config-prettier eslint-plugin-prettier husky lint-staged



RESEARCH FOR LATER: `sass-lint`



FILE/IMAGE LOADING
=================================================
https://www.codementor.io/valentinrad/roll-your-own-tiny-react-environment-using-webpack-babel-and-sass-ei70wyhjl
* Needed to load images and add it to our bundle
* Use:
    npm install file-loader
    npm install url-loader



TESTING
=================================================
https://redux.js.org/recipes/writing-tests
Testing in Jest: https://jestjs.io/
* Install:
    npm install --save-dev jest babel-jest
* Update `.babelrc`:
    "presets": ["@babel/preset-env"]
* Update scripts in `package.json`:
    "test": "jest",
    "test:watch": "npm test -- --watch"
* Action Creators: we want to test if correct action creator was called, and if the right action was returned
    import * as actions from ...
    import * as types from ...
    describe('actions', () => {
        it('should create an action to add a todo', () => {
            const text = 'Finish docs'
            const expectedAction = {
                type: types.ADD_TODO,
                text
            }
            expect(actions.addTodo(text)).toEqual(expectedAction)
        })
    })

* Reducers: should return new state after applying action to the previous state
    import reducer from ...
    import * as types from ...
    describe('todos reducer', () => {
        it('should return the initial state', () => {
            expect(reducer(undefined, {})).toEqual([
                {
                    text: 'Use Redux',
                    completed: false,
                    id: 0
                }
            ])
        })

        it('should handle ADD_TODO', () => {
            expect(
                reducer([], {
                    type: types.ADD_TODO,
                    text: 'Run the tests'
                })
            ).toEqual([
                {
                    text: 'Run the tests',
                    completed: false,
                    id: 0
                }
            ])

            expect(
                reducer(
                    [
                        {
                            text: 'Use Redux',
                            completed: false,
                            id: 0
                        }
                    ],
                    {
                        type: types.ADD_TODO,
                        text: 'Run the tests'
                    }
                ).toEqual([
                    {
                        text: 'Run the tests',
                        completed: false,
                        id: 1
                    },
                    {
                        text: 'Use Redux',
                        completed: false,
                        id: 0
                    }
                ])
            )
        })
    })

* Components: 
    * Requires Enzyme: https://airbnb.io/enzyme/
        npm install --save-dev enzyme enzyme-adapter-react-16
    * Test with:

    import React from 'react';
    import Enzyme, { shallow } from 'enzyme';
    import Adapter from 'enzyme-adapter-react-16';
    import Header from ...

    Enzyme.configure({ adapter: new Adapter() });

    function setup() {
        const props = {
            addTodo: jest.fn();
        };

        const enzymeWrapper = shallow(<Header {...props} />);

        return {
            props, enzymeWrapper
        };
    }

    describe('components', () => {
        describe('Header', () => {
            it('should render self and subcomponents', () => {
                const { enzymeWrapper } = setup();

                expect(enzymeWrapper.find('header').hasClass('header')).toBe(true);

                expect(enzymeWrapper.find('h1').text()).toBe('todos');

                const todoInputProps = enzymeWrapper.find('TodoTextInput').props();
                expect(todoInputProps.newTodo).toBe(true);
                expect(todoInputProps.placeholder).toEqual('What needs to be done?');
            })

            it('should call addTodo if length of text is greater than 0', () => {
                const { enzymeWrapper, props } = setup();
                const input = enzymeWrapper.fid('TodoTextInput');
                input.props().onSave('');
                expect(props.addTodo.mock.calls.length).toBe(0);
                input.props().onSave('Use Redux');
                expect(props.addTodo.mock.calls.length).toBe(1);
            })
        })
    })

* Connected Components
